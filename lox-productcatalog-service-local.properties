# ===============================
# Configuración R2DBC (PostgreSQL)
# ===============================
spring.r2dbc.url=r2dbc:postgresql://localhost:5436/productcatalogdb
spring.r2dbc.username=admin
spring.r2dbc.password=admin
spring.r2dbc.pool.initial-size=5
spring.r2dbc.pool.max-size=20

# =====================================
# Configuración Flyway (usa JDBC)
# =====================================
spring.flyway.enabled=true
spring.flyway.url=jdbc:postgresql://localhost:5436/productcatalogdb
spring.flyway.user=admin
spring.flyway.password=admin
spring.flyway.schemas=public
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.validate-on-migrate=true
spring.flyway.out-of-order=true
spring.flyway.ignore-missing-migrations=true
spring.flyway.ignore-future-migrations=true

# =====================================
# Configuración de Kafka
# =====================================
spring.kafka.bootstrap-servers=localhost:29092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.group-id=lox-productcatalog-service-group
kafka.product.events.topic=product.events

# =====================================
# Configuración de Redis
# =====================================
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.username=springbootuser
spring.redis.password=springbootpassword
spring.redis.timeout=60000
spring.redis.lettuce.pool.max-active=8
spring.redis.lettuce.pool.max-idle=8
spring.redis.lettuce.pool.min-idle=0
spring.redis.lettuce.pool.max-wait=-1ms

# =====================================
# Configuración del Cliente Eureka
# =====================================
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.healthcheck.enabled=true
eureka.instance.hostname=localhost
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# =====================================
# Configuración de Tracing con Zipkin
# =====================================
management.tracing.enabled=true
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans

# =====================================
# Configuración de Management y Métricas
# =====================================
management.endpoints.web.exposure.include=health,info,metrics,prometheus,refresh
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=PRODUCTCATALOG-SERVICE-PROMETHEUS-INPUT

# =====================================
# Configuración de Logging
# =====================================
logging.level.root=INFO
logging.pattern.correlation=[${spring.application.name:},%X{traceId:-},%X{spanId:-}]

# =====================================
# Configuración de Loki
# =====================================
loki.url=http://localhost:3100/loki/api/v1/push

# =====================================
# Configuración de JWT
# =====================================
jwt.secret=tu_secreto_jwt_aqui
jwt.expirationMs=86400000

# ===============================
# Resilience4j Configuration
# ===============================
# Enable health indicator for the circuit breaker. This allows monitoring tools to check the circuit breaker status.
resilience4j.circuitbreaker.instances.productServiceCB.registerHealthIndicator=true 
# The size of the sliding window used to calculate failure rate. Here, 10 calls will be considered for analysis.
resilience4j.circuitbreaker.instances.productServiceCB.slidingWindowSize=10
# Minimum number of calls that must be recorded in the sliding window before the circuit breaker evaluates failure rate.
resilience4j.circuitbreaker.instances.productServiceCB.minimumNumberOfCalls=5
# Failure rate threshold percentage. If the failure rate exceeds 50%, the circuit breaker will open.
resilience4j.circuitbreaker.instances.productServiceCB.failureRateThreshold=50
# Time the circuit breaker remains in the OPEN state before transitioning to HALF-OPEN state (10 seconds in milliseconds).
resilience4j.circuitbreaker.instances.productServiceCB.waitDurationInOpenState=10000
# Number of calls permitted in the HALF-OPEN state for testing system recovery.
resilience4j.circuitbreaker.instances.productServiceCB.permittedNumberOfCallsInHalfOpenState=3
# Automatically transition from OPEN to HALF-OPEN state after the wait duration without requiring external triggers.
resilience4j.circuitbreaker.instances.productServiceCB.automaticTransitionFromOpenToHalfOpenEnabled=true
# Exceptions that will be recorded as failures by the circuit breaker.
resilience4j.circuitbreaker.instances.productServiceCB.recordExceptions=java.lang.RuntimeException,com.lox.productcatalog.exceptions.ProductNotFoundException
# Exceptions that will be ignored by the circuit breaker, even if they occur.
resilience4j.circuitbreaker.instances.productServiceCB.ignoreExceptions=

# --------------------------------------------
# Retry configuration for the product service
# --------------------------------------------
# Maximum number of retry attempts in case of failures.
resilience4j.retry.instances.productServiceRetry.maxAttempts=3
# Wait duration between retry attempts (500 milliseconds).
resilience4j.retry.instances.productServiceRetry.waitDuration=500
# Exceptions that will trigger a retry attempt.
resilience4j.retry.instances.productServiceRetry.retryExceptions=java.lang.RuntimeException,com.lox.productcatalog.exceptions.ProductNotFoundException
# Exceptions that will not trigger a retry and will be ignored.
resilience4j.retry.instances.productServiceRetry.ignoreExceptions=

# --------------------------------------------
# Rate limiter configuration for product service
# --------------------------------------------
# Maximum number of permitted calls in a single limit refresh period.
resilience4j.ratelimiter.instances.productServiceRateLimiter.limitForPeriod=10
# Duration of the refresh period (1 second). The call limit resets every 1 second.
resilience4j.ratelimiter.instances.productServiceRateLimiter.limitRefreshPeriod=1s
# Maximum time a call will wait to acquire permission if the rate limit has been reached (500 milliseconds).
resilience4j.ratelimiter.instances.productServiceRateLimiter.timeoutDuration=500

